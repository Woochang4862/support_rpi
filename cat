diff --git a/main.py b/main.py
index 3d10aa7..ae7a8f6 100644
--- a/main.py
+++ b/main.py
@@ -5,6 +5,7 @@ from firebase_admin import db
 import time
 from datetime import datetime
 from threading import Thread
+import os
 
 # Firebase Admin SDK 초기화
 cred = credentials.Certificate('serviceAccountKey.json')
@@ -28,7 +29,7 @@ def get_data(ser):
     
             
 if __name__ == '__main__':
-    ser = Serial('/dev/ttyACM1', 9600, timeout=1)
+    ser = Serial('/dev/ttyACM0', 9600, timeout=1)
     ref = db.reference('laundry')
     
     thread1 = Thread(target = get_data, args=(ser,))
diff --git a/test.ino b/test.ino
deleted file mode 100644
index bb6e1fd..0000000
--- a/test.ino
+++ /dev/null
@@ -1,118 +0,0 @@
-#include<Simpletimer.h>
-
-Simpletimer timer{};
-
-int sensorPin = A2;    
-int sensorValue = 0;
-static const int number_of_time = 2;
-double accW[number_of_time] {0,0};
-double accA[number_of_time] {0,0};
-double mW[number_of_time]  {0,0};
-double mA[number_of_time] {0,0};
-int count[number_of_time] {0,0};
-
-void calculateByTenSeconds(){
-   mW[0] = accW[0] / count[0];
-   mA[0] = accA[0] / count[0];
-   accW[0] = 0;
-   accA[0] = 0;
-   count[0] = 0;
-}
-
-void calculateByThirtySeconds(){
-   mW[1] = accW[1] / count[1];
-   mA[1] = accA[1] / count[1];
-   accW[1] = 0;
-   accA[1] = 0;
-   count[1] = 0;
-}
-
-void calculateByOneMinute(){
-   mW[2] = accW[2] / count[2];
-   mA[2] = accA[2] / count[2];
-   accW[2] = 0;
-   accA[2] = 0;
-   count[2] = 0;
-}
-
-Simpletimer::callback callbacks[number_of_time]
-{
-  calculateByTenSeconds,
-  calculateByThirtySeconds
-  // calculateByOneMinute
-};
-#define ONE_SECOND 1000
-unsigned long intervals[number_of_time]
-{
-  10*ONE_SECOND,
-  30*ONE_SECOND
-  // 34*ONE_SECOND
-};
-
-void setup() {
-  // declare the ledPin as an OUTPUT:
-  int ledPin = 12;
-  Serial.begin(9600);
-  pinMode(ledPin, OUTPUT);
-  timer.register_multiple_callbacks(callbacks, intervals, number_of_time);
-  // Serial.print("와트, ");
-  // Serial.print("암페어, ");
-  // Serial.print("평균와트(10초), ");
-  // Serial.print("평균와트(30초), ");
-  // Serial.print("평균와트(60초), ");
-  // Serial.print("평균암페어(10초), ");
-  // Serial.print("평균암페어(30초), ");
-  // Serial.print("평균암페어(60초), ");
-  // Serial.print("데이터 수(10초)");
-  // Serial.print("데이터 수(30초)");
-  // Serial.println("데이터 수(60초)");
-}
-
-// bool Simpletimer::timer(unsigned long waitTime) {
-//   Serial.println(_run_count);
-//   return true;
-// }
-
-void loop() {
-  // read the value from the sensor:
-  sensorValue = analogRead(sensorPin);
-  //Serial.print(" D : ");
-  //Serial.println(sensorValue);
-  timer.run();
-  float A = map(sensorValue,0,573,0,20000) * 0.001;
-  //Serial.print(" A : ");
-  accA[0] += A;
-  accA[1] += A;
-  // accA[2] += A;
-  //Serial.print(A*0.001);
-  float W = 220 * A;
-  accW[0] += W;
-  accW[1] += W;
-  // accW[2] += W;
-  count[0]++;
-  count[1]++;
-  // count[2]++;
-  //Serial.print(" W : ");
-  Serial.println(W);
-  /*Serial.print(",\t");
-  Serial.print(A);
-  Serial.print(",\t");
-  Serial.print(mW[0]);
-  Serial.print(",\t");
-  Serial.print(mW[1]);
-  Serial.print(",\t");
-  // Serial.print(mW[2]);
-  // Serial.print(",\t");
-  Serial.print(mA[0]);
-  Serial.print(",\t");
-  Serial.print(mA[1]);
-  Serial.print(",\t");
-  // Serial.print(mA[2]);
-  // Serial.print(",\t");
-  Serial.print(count[0]);
-  Serial.print(",\t");
-  Serial.println(count[1]);
-  // Serial.print(",\t");
-  // Serial.println(count[2]);*/
-  
-}
\ No newline at end of file
diff --git a/test_read_sensor.ino b/test_read_sensor.ino
deleted file mode 100644
index f4351c3..0000000
--- a/test_read_sensor.ino
+++ /dev/null
@@ -1,89 +0,0 @@
-#include <Arduino.h>
-#include <WiFi.h>
-#include <Firebase_ESP_Client.h>
-#include <Simpletimer.h>
-#include "addons/TokenHelper.h"
-#include "addons/RTDBHelper.h"
-
-// WiFi 자격증명
-#define WIFI_SSID "당신의_WiFi_SSID"
-#define WIFI_PASSWORD "당신의_WiFi_비밀번호"
-
-// Firebase 프로젝트 설정
-#define API_KEY "당신의_FIREBASE_API_KEY"
-#define DATABASE_URL "당신의_FIREBASE_DATABASE_URL"
-
-// Firebase 객체 선언
-FirebaseData fbdo;
-FirebaseAuth auth;
-FirebaseConfig config;
-
-Simpletimer timer{};
-
-// sen0211 센서 설정
-const int sensorPin = A0;  
-float currentValue = 0;
-float powerValue = 0;
-
-void sendToFirebase() {
-  if (Firebase.ready()) {
-    // 현재 타임스탬프 생성
-    String timestamp = String(millis());
-    
-    // 데이터 저장 경로 설정
-    String path = "/sensor_data/" + timestamp;
-    
-    // Firebase에 데이터 저장
-    Firebase.RTDB.setFloat(&fbdo, path + "/current", currentValue);
-    Firebase.RTDB.setFloat(&fbdo, path + "/power", powerValue);
-  }
-}
-
-Simpletimer::callback callbacks[] = {sendToFirebase};
-unsigned long intervals[] = {10000}; // 10초
-
-void setup() {
-  Serial.begin(115200);
-  
-  // WiFi 연결
-  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
-  Serial.print("WiFi 연결 중...");
-  while (WiFi.status() != WL_CONNECTED) {
-    Serial.print(".");
-    delay(300);
-  }
-  Serial.println();
-  Serial.print("연결됨, IP 주소: ");
-  Serial.println(WiFi.localIP());
-
-  // Firebase 설정
-  config.api_key = API_KEY;
-  config.database_url = DATABASE_URL;
-  Firebase.begin(&config, &auth);
-  Firebase.reconnectWiFi(true);
-
-  // 타이머 설정
-  timer.register_multiple_callbacks(callbacks, intervals, 1);
-}
-
-void loop() {
-  // sen0211 센서 읽기
-  int sensorValue = analogRead(sensorPin);
-  
-  // 전류값 계산 (센서 사양에 맞게 조정 필요)
-  currentValue = (sensorValue - 2048) * 0.0488; // mA
-  
-  // 전력 계산 (220V 가정)
-  powerValue = 220 * currentValue; // mW
-  
-  // 타이머 실행
-  timer.run();
-  
-  // 시리얼 모니터에 출력
-  Serial.print("전류(mA): ");
-  Serial.print(currentValue);
-  Serial.print("\t전력(mW): ");
-  Serial.println(powerValue);
-  
-  delay(100);
-}
